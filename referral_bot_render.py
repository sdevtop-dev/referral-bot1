# –ë–æ—Ç –Ω–∞ Python –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –¥–ª—è Telegram
# –ü—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ aiogram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞)
# –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ Render –∞–±–æ Railway

from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import logging
import os
from collections import defaultdict

# –í—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –≤—ñ–¥ @BotFather
BOT_TOKEN = os.getenv("BOT_TOKEN") or "–í–°–¢–ê–í_–°–í–Ü–ô_–¢–û–ö–ï–ù"
CHANNEL_ID = os.getenv("CHANNEL_ID") or "@–Ω–∞–∑–≤–∞_–∫–∞–Ω–∞–ª—É"

# –ü—Ä–æ—Å—Ç–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ —É –ø–∞–º'—è—Ç—ñ (–Ω–∞ –ø—Ä–æ–¥—ñ ‚Äî –±–∞–∑–∞)
referrals = defaultdict(list)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª
async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "creator", "administrator"]
    except Exception:
        return False

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    args = message.get_args()
    user_id = message.from_user.id

    # –Ø–∫—â–æ —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
    if args and args != str(user_id):
        if user_id not in referrals[args]:
            referrals[args].append(user_id)

    sub = await is_subscribed(user_id)
    if sub:
        await message.answer("–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! üéâ")
    else:
        await message.answer(f"–©–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å ‚Äî –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}, –∞ –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ /start")

    await message.answer(f"–¢–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:
https://t.me/{(await bot.get_me()).username}?start={user_id}")

@dp.message_handler(commands=['stats'])
async def stats_handler(message: types.Message):
    user_id = str(message.from_user.id)
    count = len(referrals[user_id])
    await message.answer(f"–¢–∏ –∑–∞–ø—Ä–æ—Å–∏–≤: {count} –ª—é–¥–µ–π")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
