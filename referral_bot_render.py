# bot.py
import logging
import os
from collections import defaultdict

from aiogram import Bot, Dispatcher, executor, types

BOT_TOKEN = os.getenv("BOT_TOKEN") or "–í–°–¢–ê–í_–°–í–Ü–ô_–¢–û–ö–ï–ù"
CHANNEL_ID = os.getenv("CHANNEL_ID") or "@–Ω–∞–∑–≤–∞_–∫–∞–Ω–∞–ª—É"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ —É –ø–∞–º'—è—Ç—ñ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∫—Ä–∞—â–µ –ë–î)
referrals = defaultdict(list)

async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "creator", "administrator"]
    except Exception:
        return False

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    args = message.get_args()
    user_id = str(message.from_user.id)

    # –Ø–∫—â–æ —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ —ñ —Ü–µ –Ω–µ –≤–ª–∞—Å–Ω–∏–π –∫–æ–¥
    if args and args != user_id:
        if user_id not in referrals[args]:
            referrals[args].append(user_id)

    sub = await is_subscribed(message.from_user.id)
    if sub:
        await message.answer("–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! üéâ")
    else:
        await message.answer(f"–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}, —â–æ–± –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å.")

    bot_username = (await bot.get_me()).username
    await message.answer(f"–¢–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\nhttps://t.me/{bot_username}?start={user_id}")

@dp.message_handler(commands=['stats'])
async def stats_handler(message: types.Message):
    user_id = str(message.from_user.id)
    count = len(referrals[user_id])
    await message.answer(f"–¢–∏ –∑–∞–ø—Ä–æ—Å–∏–≤: {count} –ª—é–¥–µ–π")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
